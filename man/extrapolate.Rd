% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/AllGeneric.R, R/DemographicArray-methods.R
\name{extrapolate}
\alias{extrapolate}
\alias{extrapolate,DemographicArray-method}
\title{Add extrapolated values to demographic array.}
\usage{
extrapolate(
  object,
  along = NULL,
  labels,
  growth = 0,
  type = c("exponential", "linear", "missing")
)

\S4method{extrapolate}{DemographicArray}(
  object,
  along = NULL,
  labels,
  growth = 0,
  type = c("exponential", "linear", "missing")
)
}
\arguments{
\item{object}{An object of class \code{\linkS4class{DemographicArray}}.}

\item{along}{Name or index of dimension along which values are extrapolated.
If \code{along} is omitted, \code{extrapolate} looks for a dimension with
\code{\link{dimtype}} \code{"time"}, \code{"age"}, or \code{"cohort"} (in
that order).}

\item{labels}{Labels for the new elements to be added to dimension
\code{along}.}

\item{growth}{A single number, or a \code{\linkS4class{DemographicArray}}
object specifying growth rates or increments.}

\item{type}{The type of growth assumed: \code{"exponential"},
\code{"linear"}, or \code{"missing"}.  Can be abbreviated.  Defaults to
\code{"exponential"}.  See below for details.}
}
\value{
An object of the same class as \code{object}.
}
\description{
Given assumptions about the type and amount of change, extend a demographic
array along a specified dimension.
}
\details{
The \code{along} dimension must have \code{\link{dimscale}}
\code{"Intervals"} or \code{"Points"}, which means that it must have
\code{\link{dimtype}} \code{"age"}, \code{"cohort"}, or \code{"time"}.  The
intervals or points do not need to be evenly spaced.

Values may be extrapolated forward, from the end of the \code{along}
dimension, or backward, from the start.  See below for examples.

If \code{growth} is a demographic array, it will
typically have been created by a call to \code{\link{growth}}.  Use of a
demographic array object allows growth rates or increments to differ
within classifying variables: see \code{\link{growth}} for details.

If \code{type} is \code{"exponential"}, then extrapolated values are
generated using the formula \eqn{y_n = y_1 (1 + g)^(t_n - t_1)}{y[n] = y[1]
(1 + g)^(t[n] - t[1])}, and if \code{type} is \code{"linear"}, values are
generated using \eqn{y_n = y_1 + (t_n - t_1) g}{y[n] = y[1] + (t[n] - t[1])
g}, where \eqn{g} is \code{growth}.  If \code{type} is \code{"missing"} the
extra cells are filled with \code{NA}s.
}
\examples{
## prepare data
library(datasets)
spend <- USPersonalExpenditure
names(dimnames(spend)) <- c("category", "year")
spend <- Values(spend)

## extrapolate assuming expenditure in all
## categories grows at 1\% per annum
## (note that 'type' defaults to "exponential")
extrapolate(spend, labels = c(1965, 1970), growth = 0.01)

## linear increase of $1 per annum
extrapolate(spend, labels = c(1965, 1970), growth = 1, type = "linear")
extrapolate(spend, labels = c(1965, 1970), growth = 1, type = "l")

## grows at historial growth rate - same rate for all categories
gr <- growth(spend)
extrapolate(spend, labels = c(1965, 1970), growth = gr)

## grows at historical growth rates - rate specific to each category
gr <- growth(spend, within = "category")
extrapolate(spend, labels = c(1965, 1970), growth = gr)

## irregularly-spaced times
extrapolate(spend, labels = c(1972.25, 2001), growth = 0.01)

## backward extrapolation
extrapolate(spend, labels = c(1930, 1935), growth = 0.01)

## fill extra years with NAs
extrapolate(spend, labels = c(1965, 1970), type = "missing")


## example of extrapolation over age intervals
library(demdata)
deaths <- Values(VADeaths2)
gr <- growth(deaths, along = "age", within = c("sex", "residence"))
extrapolate(deaths, along = "age", labels = c("75-79", "80+"), growth = gr)
}
\seealso{
\code{\link{growth}}
}
