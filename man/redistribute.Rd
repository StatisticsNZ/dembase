% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/AllGeneric.R, R/Counts-methods.R,
%   R/Values-methods.R, R/numeric-methods.R
\docType{methods}
\name{redistribute}
\alias{redistribute}
\alias{redistribute,Counts,DemographicArray-method}
\alias{redistribute,Values,DemographicArray-method}
\alias{redistribute,numeric,DemographicArray-method}
\title{Randomly allocate counts in proportion to weights.}
\usage{
redistribute(counts, weights, means = FALSE, n = NULL)

\S4method{redistribute}{Counts,DemographicArray}(counts, weights,
  means = FALSE, n = NULL)

\S4method{redistribute}{Values,DemographicArray}(counts, weights, n = NULL)

\S4method{redistribute}{numeric,DemographicArray}(counts, weights,
  means = FALSE, n = NULL)
}
\arguments{
\item{counts}{Object of class \code{\linkS4class{Counts}} consisting of
non-negative integers, or a single non-negative integer.}

\item{weights}{Object of class \code{\linkS4class{DemographicArray}} with no
negative values.}

\item{means}{If \code{FALSE} (the default) the allocation is done randomly;
if \code{TRUE}, values are set equal to their means.}

\item{n}{Number of iterations to generate.  Ignored if \code{counts} or
\code{weights} has a dimension with \code{\link{dimtype}}
\code{"iteration"}.}
}
\value{
An \code{\linkS4class{Counts}} object with the same dimensions and
metadata as \code{weights}.
}
\description{
\code{weights} should have one or more dimensions that \code{counts} does
not.  The contents of each cell in \code{counts} are randomly distributed
across these extra dimensions.
}
\details{
Each cell in \code{counts} is redistributed by drawing from a multinomial
distribution with size equal to the value of the cell and probabiltiies
proportional to the values of the corresponding cells in \code{weights}.

\code{weights} is typically a set of observed counts, such a
cross-tabulation of records with no missing data.  However, \code{weights}
could also be a sample from a posterior distribution.
}
\examples{
x <- Counts(array(c(10, 12),
                  dim = 2,
                  dimnames = list(sex = c("Female", "Male"))))
y <- Counts(array(0:5,
                  dim = c(2, 3),
                  dimnames = list(sex = c("Female", "Male"),
                      region = c("A", "B", "C"))))

redistribute(x, weights = y)

## specify the number of iterations
redistribute(x, weights = y, n = 3)

ans <- redistribute(x, weights = y)
ans
## reverse the effects
collapseDimension(ans, dimension = "region")

## give all cells a chance of being non-zero
redistribute(x, weights = y + 0.1, n = 10)

## 'counts' is a single value
redistribute(10, weights = y)
}
\seealso{
\code{\link{rmultinom}}
}
