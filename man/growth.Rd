% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/AllGeneric.R, R/Counts-methods.R, R/Values-methods.R
\docType{methods}
\name{growth}
\alias{growth}
\alias{growth,Counts-method}
\alias{growth,Values-method}
\title{Calculate average growth rates or increments.}
\usage{
growth(object, along = NULL, within = NULL, weights, type = c("linear",
  "exponential"), method = c("endpoints", "lm"))

\S4method{growth}{Counts}(object, along = NULL, within = NULL, weights,
  type = c("exponential", "linear"), method = c("endpoints", "lm"))

\S4method{growth}{Values}(object, along = NULL, within = NULL, weights,
  type = c("exponential", "linear"), method = c("endpoints", "lm"))
}
\arguments{
\item{object}{Object of class \code{\linkS4class{DemographicArray}}.}

\item{along}{Name or index of dimension along which growth is calculated.
If \code{along} is omitted, \code{growth} looks for a dimension with
\code{\link{dimtype}} \code{"time"}, \code{"age"}, or \code{"cohort"} (in
that order).}

\item{within}{Name or index of dimensions within which growth is calculated.
Value \code{"."} can be used as shorthand for "all dimensions other than
\code{along}".  Origin-destination or parent-child pairs can be referred to
using their base name.  See below for examples.}

\item{weights}{Object of class \code{\linkS4class{Counts}}, supplying
weights to be used when aggregating dimensions not included in \code{along}
or \code{within}.}

\item{type}{One of \code{"exponential"} or \code{"linear"}.  If
\code{"exponential"}, growth rates are calculated; if \code{"linear"},
increments are calculated.  Can be abbreviated. Defaults to
\code{"exponential"}.}

\item{method}{One of \code{"endpoints"} or \code{"lm"}.  See below for
details.}
}
\value{
If \code{within} is \code{NULL}, a numeric value; otherwise an
object with the same class as \code{object}.
}
\description{
Calculate average growth rates or increments for a
\code{\linkS4class{DemographicArray}} object.
}
\details{
The \code{along} dimension must have \code{\link{dimscale}}
\code{"Intervals"} or \code{"Points"}, which means that it must have
\code{\link{dimtype}} \code{"age"}, \code{"cohort"}, or \code{"time"}.  The
intervals or points do not need to be evenly spaced.

If there is a dimension with \code{\link{dimtype}} \code{"iteration"} and
that dimension is not explicitly included in \code{within}, then it is added
to \code{within} automatically.

All dimensions of \code{object} not included in \code{along} or
\code{within} are aggregated before growth rates or increments are
calculated.

If a \code{weights} argument is supplied when \code{object} has class
\code{\linkS4class{Counts}}, the argument is ignored.  If a \code{weights}
argument is not supplied when \code{object} has class
\code{\linkS4class{Values}}, all elements are given equal weight.

If \code{method} is \code{"endpoints"}, then growth rates or increments are
calculated from the first and last points only.  If \code{method} is
\code{"lm"}, then growth rates are calculated by fitting a linear model to
the logged values, and increments are calculated by fitting a linear model
to the values.
}
\examples{

## construct data
spend <- USPersonalExpenditure
names(dimnames(spend)) <- c("category", "year")
spend <- Counts(spend)

## calculate average growth rate across all categories
growth(spend, along = "year")
growth(spend) ## defaults to using dimension with dimtype "time"

## growth within categories
growth(spend, within = "category")
growth(spend, within = ".")

## increments rather than rates
growth(spend, within = "category", type = "linear")

## two different methods for calculating
growth(spend, within = "category")
growth(spend, within = "category", method = "lm")

## use base name to specific origin and destination dimensions
a <- array(rpois(n = 45, lambda = 10),
           dim = c(3, 3, 5),
           dimnames = list(reg_orig = 1:3,
               reg_dest = 1:3, time = 2000:2004))
x <- Counts(a, dimscales = c(time = "Points"))
growth(x, within = c("reg_orig", "reg_dest"))
growth(x, within = "reg")
}
\seealso{
\code{\link{extrapolate}}
}

