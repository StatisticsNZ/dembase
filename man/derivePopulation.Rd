% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Movements-generator.R
\name{derivePopulation}
\alias{derivePopulation}
\title{Derive population counts from initial population and components.}
\usage{
derivePopulation(initial, births = NULL, internal = NULL,
  entries = list(), exits = list(), net = list(), movements = TRUE,
  adjust = FALSE, scale = 0.1)
}
\arguments{
\item{initial}{The starting or jump-off population. An object of
class \code{\linkS4class{Counts}}.}

\item{births}{A \code{\linkS4class{Counts}} object.}

\item{internal}{If \code{internal} uses an origin-destination format,
an ordinary \code{\linkS4class{Counts}} object; if it uses a pool or
net format, an object created by functions \code{\link{collapseOrigDest}},
\code{\link{Pool}}, or \code{\link{Net}}.}

\item{entries}{A named list of \code{\linkS4class{Counts}} objects.}

\item{exits}{A named list of \code{\linkS4class{Counts}} objects.}

\item{net}{A named list of \code{\linkS4class{Counts}} objects.}

\item{movements}{Logical. If \code{TRUE} (the default) and
\code{\linkS4class{Movements}} account is returned.  If \code{FALSE},
a \code{Transitions} account is returned.}

\item{adjust}{Logical. If \code{FALSE} (the default) an error is
raised of the initial population and components imply negative
population counts.  If \code{TRUE}, the components are adjusted
until negative population counts are eliminated.}

\item{scale}{A non-negative number governing the size of the steps
made when adjusting.}
}
\value{
A \code{\linkS4class{DemographicAccount}}.
}
\description{
Given initial population counts, and counts for components such as
births, deaths, and migration, derive population counts for subsequent
years.
}
\details{
Sometimes values for the initial population and components imply
negative population counts.  In such cases, an error will be raised
if the \code{adjust} is \code{FALSE} (the default). Otherwise,
\code{derivePopulation} will randomly revise entries (eg births)
upwards and exits (eg deaths) downwards until the population counts
become non-negative, via function \code{\link{makeConsistent}}.

The \code{initial} argument does not need to have a time dimension,
but it does, the dimension must be of length 1, and must have
\code{\link{dimscale}} \code{"Points"}.  The components must
have identical time dimensions to one another, and these dimensions
must have dimscale \code{"Intervals"}.

If \code{initial} has an age dimension, then all components must
have an age dimension, except for \code{births}.  (\code{births}
will be given age and triangle dimensions, and entries will be randomly
distributed across these.)
}
\examples{
initial <- Counts(array(c(10, 15),
                        dim = 2,
                        dimnames = list(age = c("0-29", "30+"))))
births <- Counts(array(13,
                       dim = c(1, 1),
                       dimnames = list(age = "30+",
                                       time = "1971-2000")))
deaths <- Counts(array(c(0, 9),
                       dim = c(2, 1),
                       dimnames = list(age = c("0-29", "30+"),
                                       time = c("1971-2000"))))
derivePopulation(initial = initial,
                  births = births,
                  exits = list(deaths = deaths))

## 'births' has no age dimension, so it is given one
births.no.age <- Counts(array(13,
                              dim = 1,
                              dimnames = list(time = "1971-2000")))
derivePopulation(initial = initial,
                  births = births.no.age,
                  exits = list(deaths = deaths))

## Calculations using age-time steps of one quarter.  (Note, incidentally,
## that an account does not have to start from age 0 if it does not
## include births.)
initial <- Counts(array(11:15,
                        dim = c(5, 1),
                        dimnames = list(age = c("20-20.25", "20.25-20.5",
                                           "20.5-20.75", "20.75-21", "21+"),
                                        time = 2000)),
                  dimscales = c(time = "Points"))
deaths <- Counts(array(c(0, 2, 1, 3, 4, 1, 2, 3, 1, 5),
                       dim = c(5, 2, 1),
                       dimnames = list(age = c("20-20.25", "20.25-20.5",
                                           "20.5-20.75", "20.75-21", "21+"),
                                       triangle = c("TL", "TU"),
                                       time = "2000-2000.25")))
account <- derivePopulation(initial = initial,
                            exits = list(deaths = deaths))
account
summary(account)
}
\seealso{
Most of the work for \code{derivePopulation} is done by
function \code{\link{makeConsistent}}.
}
