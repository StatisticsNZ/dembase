% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/AllGeneric.R, R/Counts-methods.R,
%   R/Values-methods.R
\docType{methods}
\name{dplot}
\alias{dplot}
\alias{dplot,formula,Counts-method}
\alias{dplot,formula,Values-method}
\title{Construct a lattice plot from a demographic array.}
\usage{
dplot(formula, data, ...)

\S4method{dplot}{formula,Counts}(formula, data, type = NULL,
  panel = panel.dplot, groups, midpoints = FALSE, subarray,
  probs = c(0.025, 0.25, 0.5, 0.75, 0.975), horizontal = FALSE,
  overlay = NULL, ...)

\S4method{dplot}{formula,Values}(formula, data, type = NULL,
  panel = panel.dplot, weights, midpoints = FALSE, subarray,
  probs = c(0.025, 0.25, 0.5, 0.75, 0.975), horizontal = FALSE,
  overlay = NULL, ...)
}
\arguments{
\item{formula}{\code{formula} object.  The symbols to the right of the
\code{~} are interpreted like the right hand side of a standard
\code{\link[lattice]{xyplot}} formula, but the symbols to the left are
interpreted differently.  See below for details.}

\item{data}{Object of class \code{\linkS4class{DemographicArray}}.}

\item{\dots}{Other arguments, which are passed to the underlying plotting
function, \code{\link[lattice]{xyplot}}.}

\item{type}{Character vector describing the type or types of plot to be
drawn, as described in \code{\link[lattice]{panel.xyplot}}.}

\item{panel}{Panel function.  See \code{\link{xyplot}}.}

\item{groups}{A dimension of \code{data}.  Levels for this dimension are
overplotted within each panel.}

\item{midpoints}{\code{TRUE}, \code{FALSE} (the default), or a character
vector.}

\item{subarray}{Expression used to select a subarray from within
\code{data}.}

\item{probs}{Numeric vector used by \code{\link{collapseIterations}} when
\code{object} has a dimension with \code{\link{dimtype}}
\code{"iteration"}.}

\item{horizontal}{Logical, defaulting to \code{FALSE}. If \code{TRUE},
the roles of the 'x' and 'y' axes are reversed.}

\item{overlay}{A list describing and overlay.}

\item{weights}{Object of class \code{\linkS4class{Counts}}.}
}
\value{
Object of class \code{"trellis"}.
}
\description{
Construct a lattice plot from an object of class
\code{\linkS4class{DemographicArray}}.  \code{dplot} is much like
\code{\link[lattice]{xyplot}}, but with extra facilities for aggregating and
summarizing, and slightly different defaults.
}
\details{
If \code{object} has class \code{\linkS4class{Counts}}, then the choices
for the response on the left of the \code{~} are as follows:
\describe{
  \item{\code{count}}{Cell counts are plotted, possibly after aggregation.}
  \item{Blank}{Equivalent to \code{count}.}
  \item{A function of \code{count}, eg \code{log(count)}}{Cell counts
    are aggregated, tranformed, and plotted.}
  \item{\code{proportion} or \code{percent}}{A \code{groups} argument must be
     supplied.  Cell counts are aggregated, then the distribution across groups
     is plotted.}
}
If \code{object} has class \code{\linkS4class{Values}}, then the choices
for the response on the left of the \code{~} are as follows:
\describe{
  \item{\code{value}}{Cell values are plotted, possibly after aggregation.}
  \item{Blank}{Equivalent to \code{values}.}
  \item{A function of \code{values}, eg \code{log(values)}}{Cell values
    are aggregated, tranformed, and plotted.}
}

If \code{midpoints} is \code{FALSE}, axes representing dimensions with
\code{dimscale} \code{"Intervals"} use a label for each interval.  If
\code{midpoints} is \code{TRUE}, intervals are replaced by their midpoints
before the plot is constructed, which typically results in less cluttered
axes.  If names of individual dimensions are supplied, then only these
dimensions have their intervals converted to points.

If a \code{subset} argument is supplied, this is applied after \code{data}
is converted to a data frame.  Having separate \code{subarray} and
\code{subset} arguments can be useful, because they have different
strengths.  For instance, \code{subarray} allows expressions like \code{age
> 60} on intervals, while \code{subset} allows more complicated expressions.

The \code{overlay} provides a convenient way of adding extra values to
graphs.  Overlays can include quantiles, even if the main plot does not.
Any dimensions of \code{overlay} (if \code{overlay} has the same class as
\code{object}) or the \code{values} component of \code{overlay} (if
(\code{overlay}) is a list) that are not shared by \code{object} will be
collapsed away.  When \code{overlay} or the \code{values} component has
class \code{\linkS4class{Values}}, the collapsing uses the \code{weights}
argument.  The interface for \code{overlay} is likely to change in future.
}
\section{Warning}{
 As discussed in the documentation for
\code{\link{subarray}}, the \code{subarray} function often does not work
when called from within another function.  The same is true for the
\code{subarray} argument in \code{dplot}.  The solution is typically to use
\code{subarray} to construct the desired object, and then pass that object
to \code{dplot}.  See below for an example. We are hoping to redesign the
}

\examples{
library(demdata)
popn <- Counts(VAPopn)

## basic plot
dplot(~ age | residence * color, data = popn, groups = sex)

## with simple key
dplot(~ age | residence * color, data = popn,
      groups = sex, auto.key = list(points = FALSE, lines = TRUE))

## horizontal = TRUE
dplot(~ residence | age * color, data = popn,
      groups = sex, horizontal = TRUE)

## percent distribution by sex
dplot(percent ~ age | residence * color, data = popn,
      groups = sex, auto.key = list(points = FALSE, lines = TRUE))

## intervals represented by midpoints
dplot(count ~ age | residence, data = popn, midpoints = TRUE)

## use of subarray argument
dplot(count ~ age | residence, data = popn, subarray = age > 60)

rate <- Values(VADeaths2)

## no aggregation, so no weights needed
dplot(~ age | residence, data = rate, groups = sex)

## aggregating over residence, so weights needed
dplot(~ age, data = rate, groups = sex, weights = popn)

## pass arguments to xyplot to construct a prettier plot
dplot(~ age | residence,
      data = popn,
      groups = sex,
      col = c("dark blue", "salmon"),
      xlab = "Age",
      ylab = "Population",
      prepanel = function(y) list(ylim = c(0, max(y))),
      key = list(text = list(dimnames(popn)$sex),
                 lines = list(col = c("dark blue", "salmon"), type = "o", pch = 21),
                 space = "right"))

## calculate age-specific rate for all groups combined, and overlay on plots
rate.comb <- collapseDimension(rate, margin = "age", weights = popn)
dplot(~ age | sex * residence,
      data = rate,
      col = "blue",
      overlay = list(values = rate.comb, col = "red"),
      midpoints = "age",
      key = list(text = list(c("Rate for region and sex", "Rate for whole population")),
                 lines = list(col = c("blue", "red"), type = "o", pch = 21)))

## example of 'subarray' argument not working when 'dplot'
## called from within another function
\dontrun{f <- function(region) {
dplot(count ~ age, data = mig, subarray = island_orig == region)
}
f("South Island")}
}
\references{
Sarkar, Deepayan (2008) \emph{Lattice: Multivariate Data
Visualization with R}, Springer
}
\seealso{
Lattice plots are enormously useful, but customizing them can be
tricky.  See \code{\link{xyplot}} for an introduction, and the book in the
references section for the details.

Internally, \code{dplot} calls \code{\link{subarray}} if a \code{subarray}
argument is supplied, then \code{\link{collapseDimension}} to remove any
dimensions not included in \code{formula} or \code{groups}, then
\code{\link{as.data.frame}} to convert the data to a data frame, at
which point \link[lattice]{xyplot} takes over.

The \code{\link[=plot-methods]{plot}} method for
\code{\linkS4class{DemographicArray}} provides a quick graphical summary of a
demographic array.
}
